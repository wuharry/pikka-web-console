{"version":3,"file":"index-pvnxKrGs.js","sources":["../../src/client/constants/tabColors.ts","../../src/client/utils/html-utils.ts","../../src/client/components/console-renderer.ts","../../src/client/core/consumer.ts","../../src/client/components/main.ts","../../src/client/utils/tools.ts","../../src/client/core/console-interceptor.ts","../../src/client/core/error-collector.ts","../../src/client/core/producer.ts","../../src/client/core/main.ts","../../src/assets/template/console-page.html?raw","../../src/client/app/app-controller.ts","../../src/client/app/main.ts"],"sourcesContent":["export const LEVEL_COLOR_MAP: Record<string, string> = {\n  log: \"text-blue-600\",\n  warn: \"text-yellow-600\",\n  info: \"text-green-600\",\n  error: \"text-red-600\",\n};\n","import type { ConsolePayload, ErrorPayload } from \"@/client/types\";\nimport { LEVEL_COLOR_MAP } from \"../constants\";\n/** 視覺層對應：level -> color class */\n\n/**\n * 安全地轉義 HTML 字符\n * @param text - 要轉義的文本\n * @returns 轉義後的 HTML 安全字符串\n */\nexport function escapeHtml(text: string): string {\n  const div = document.createElement(\"div\");\n  div.textContent = text;\n  return div.innerHTML;\n}\n\n/**\n * 單則訊息 HTML\n * @param message - 消息內容\n * @param type - 消息類型\n * @param colorClass - CSS 顏色類名\n * @returns HTML 字符串\n */\nexport function createMessageHtml({\n  message,\n  colorClass,\n}: {\n  message: ConsolePayload | ErrorPayload;\n  colorClass: Record<string, string>;\n}): string {\n  if (\"level\" in message) {\n    return `\n      <div class=\"console-message border-b border-gray-200 p-2 hover:bg-gray-50\">\n        <span class=\"text-xs font-bold ${colorClass[message.level]}\">[${message.level}]</span>\n        <span class=\"text-xs text-gray-400 ml-2\">[${new Date().toLocaleTimeString()}]</span>\n        <pre class=\"text-sm font-mono mt-1 whitespace-pre-wrap\">${escapeHtml(message.message)}</pre>\n      </div>\n    `;\n  }\n  return `\n    <div class=\"console-message border-b border-gray-200 p-2 hover:bg-gray-50\">\n      <span class=\"text-xs font-bold  ${colorClass[\"error\"]}\">[${message.name}]</span>\n      <span class=\"text-xs text-gray-400 ml-2\">[${new Date().toLocaleTimeString()}]</span>\n      <pre class=\"text-sm font-mono mt-1 whitespace-pre-wrap\">${escapeHtml(message.message)}</pre>\n    </div>\n  `;\n}\n\n/**\n *  訊息清單 HTML\n * * @param messages - 消息數組\n * @param type - 消息類型\n * @param colorClass - CSS 顏色類名\n * @returns HTML 字符串\n */\nexport function createMessageListHtml({\n  messages,\n  colorClass,\n}: {\n  messages: (ConsolePayload | ErrorPayload)[];\n  colorClass: Record<string, string>;\n}): string {\n  if (messages.length === 0) {\n    return `<div class=\"text-gray-500 p-4\">No messages</div>`;\n  }\n  return messages\n    .map((msg) => createMessageHtml({ message: msg, colorClass: colorClass }))\n    .join(\"\");\n}\n\n/** 容器包一層（由 renderer 提供 className） */\nexport function buildContainer(innerHtml: string, className: string): string {\n  return `<div class=\"${className}\">${innerHtml}</div>`;\n}\n\n/** all 分頁的彙整 HTML（純函式） */\nexport function renderAllMessages({\n  messages,\n  containerClass = \"bg-white border border-gray-200 rounded-lg max-h-96 overflow-y-auto\",\n}: {\n  messages: (ConsolePayload | ErrorPayload)[];\n  containerClass: string;\n}): string {\n  const allMessages = messages\n    .slice()\n    .sort((a, b) => b.timestamp - a.timestamp);\n\n  if (allMessages.length === 0) {\n    return '<div class=\"text-gray-500 p-4\">No messages</div>';\n  }\n\n  return `<div class=\"${containerClass}\">\n  <div class=\"console-message border-b border-gray-200 p-2 hover:bg-gray-50\">\n  </\n    ${createMessageListHtml({ messages: allMessages, colorClass: LEVEL_COLOR_MAP })} })}\n  </div>`;\n}\n","// src/client/components/console-renderer.ts\nimport type {\n  ErrorPayload,\n  ConsolePayload,\n  ChannelMessage,\n  StateStore,\n} from \"../types\";\nimport {\n  createMessageListHtml,\n  renderAllMessages,\n  buildContainer,\n} from \"@/client/utils/html-utils\";\nimport { LEVEL_COLOR_MAP } from \"../constants\";\n\nconst CONTAINER_CLASS = \"console-content overflow-y-auto\";\n\nconst TAB_ACTIVE_CLASSES = {\n  log: \"bg-blue-600\",\n  error: \"bg-red-600\",\n  warn: \"bg-yellow-600\",\n  info: \"bg-green-600\",\n  all: \"bg-slate-700\",\n} as const;\n\nconst TAB_CONTENT_MAP = {\n  log: (message: ConsolePayload[]) =>\n    buildContainer(\n      createMessageListHtml({\n        messages: message,\n        colorClass: LEVEL_COLOR_MAP,\n      }),\n      CONTAINER_CLASS\n    ),\n  error: (message: ErrorPayload[]) =>\n    buildContainer(\n      createMessageListHtml({\n        messages: message,\n        colorClass: LEVEL_COLOR_MAP,\n      }),\n      CONTAINER_CLASS\n    ),\n  warn: (message: ConsolePayload[]) =>\n    buildContainer(\n      createMessageListHtml({\n        messages: message,\n        colorClass: LEVEL_COLOR_MAP,\n      }),\n      CONTAINER_CLASS\n    ),\n  info: (message: ConsolePayload[]) =>\n    buildContainer(\n      createMessageListHtml({\n        messages: message,\n        colorClass: LEVEL_COLOR_MAP,\n      }),\n      CONTAINER_CLASS\n    ),\n  all: (message: (ConsolePayload | ErrorPayload)[]) =>\n    renderAllMessages({ messages: message, containerClass: CONTAINER_CLASS }),\n} as const;\n\ntype TabKey = keyof typeof TAB_CONTENT_MAP;\n\nconst clearAllTabStats = (\n  tabs: NodeListOf<HTMLButtonElement>,\n  bgColors: string[]\n) => {\n  tabs.forEach((tab) =>\n    tab.classList.remove(\"active\", \"text-gray-50\", ...bgColors)\n  );\n};\n\nconst activateTab = (tab: HTMLButtonElement) => {\n  const tabType = (tab.dataset.tab as TabKey) || \"all\";\n  tab.classList.add(\"active\", \"text-gray-50\", TAB_ACTIVE_CLASSES[tabType]);\n};\n\nconst getTabContent = ({\n  tabType,\n  consoleData,\n}: {\n  tabType: TabKey;\n  consoleData: ChannelMessage | (ConsolePayload | ErrorPayload)[];\n}): string => {\n  if (tabType === \"all\") {\n    return TAB_CONTENT_MAP.all(consoleData);\n  }\n  if (tabType === \"error\") {\n    return TAB_CONTENT_MAP.error(consoleData as ErrorPayload[]);\n  }\n  try {\n    return TAB_CONTENT_MAP[tabType as \"log\" | \"warn\" | \"info\"](\n      consoleData as ConsolePayload[]\n    );\n  } catch (error) {\n    return \"\";\n  }\n};\n\nconst switchContent = ({\n  tabType,\n  consoleData,\n}: {\n  tabType: TabKey;\n  consoleData: ChannelMessage | (ConsolePayload | ErrorPayload)[];\n}) => {\n  const content = document.querySelector(\"#tab-content\");\n  if (content) {\n    content.innerHTML = getTabContent({\n      tabType: tabType,\n      consoleData: consoleData,\n    });\n  }\n};\n\nexport function renderTabs(data: StateStore) {\n  const tabList = document.querySelector<HTMLUListElement>(\"#tab-links\");\n  if (!tabList) {\n    return;\n  }\n\n  const tabs =\n    tabList.querySelectorAll<HTMLButtonElement>('button[role=\"tab\"]');\n  const ALL_BG_COLORS = Object.values(TAB_ACTIVE_CLASSES);\n\n  // 綁定事件監聽器\n  tabs.forEach((button) => {\n    //深層複製按鈕\n    const newButton = button.cloneNode(true) as HTMLButtonElement;\n    if (newButton.dataset.tab) {\n      const buttonText = newButton.textContent?.toLowerCase().trim();\n      newButton.dataset.tab = buttonText;\n    } else {\n      newButton.dataset.tab = \"all\";\n    }\n    button.parentNode?.replaceChild(newButton, button);\n\n    newButton.addEventListener(\"click\", (e) => {\n      const target = e.currentTarget as HTMLButtonElement;\n\n      clearAllTabStats(\n        tabList.querySelectorAll<HTMLButtonElement>('button[role=\"tab\"]'),\n        ALL_BG_COLORS\n      );\n      activateTab(target);\n      const tabType = target.dataset.tab as TabKey;\n      if (!tabType) {\n        return;\n      }\n\n      const AllData = [...data.error, ...data.info, ...data.warn, ...data.log];\n\n      switchContent({\n        tabType: tabType,\n        consoleData:\n          tabType === \"all\" ? AllData : data[tabType as keyof StateStore],\n      });\n    });\n  });\n}\n","// src/client/core/consumer.ts\nimport type { StateStore } from \"../types/ports.types\";\n\nconst consumer = (channelName: string, onDataUpdate?: () => void) => {\n  //工廠模式封裝\n  const stateStore: StateStore = {\n    error: [],\n    info: [],\n    warn: [],\n    log: [],\n  };\n\n  const broadcastChannel = new BroadcastChannel(channelName);\n  const init = () => {\n    broadcastChannel.addEventListener(\"message\", messageHandler);\n  };\n  init();\n\n  // 轉化接收到的訊息\n  function messageHandler(event: MessageEvent) {\n    const data = event.data;\n\n    if (!data || !data.message) {\n      return;\n    }\n\n    // 處理 ConsolePayload\n    if (\"level\" in data && data.level) {\n      stateStore[data.level as keyof StateStore].push(data);\n    }\n    // 處理 ErrorPayload\n    else if (\"name\" in data) {\n      stateStore.error.push(data);\n    }\n\n    if (onDataUpdate) {\n      onDataUpdate();\n    }\n  }\n\n  const cleanUp = () => {\n    broadcastChannel.removeEventListener(\"message\", messageHandler);\n    broadcastChannel.close();\n  };\n  return {\n    getChannelData: () => {\n      const { error, info, warn, log } = stateStore;\n      return { error, info, warn, log };\n    },\n    cleanUp,\n  };\n};\n\nexport { consumer };\n","// src/client/components/main.ts\nimport { renderTabs } from \"@/client/components/console-renderer\";\nimport { consumer as createConsumer } from \"../core/consumer\";\n\n/**\n * UI 控制器 - 管理使用者介面互動和渲染\n *\n * 技術實作基礎：\n * Layered Architecture 分層架構 - Presentation Layer\n *\n * 主要職責：\n * - 服務模組協調：創建和管理 console 監控服務\n * - 渲染器管理：調用 `renderTabs` 進行 UI 渲染\n * - 資源釋放：提供 `stop` 方法停止監聽和釋放資源\n * - 抽象化層級：作為應用控制器和核心服務之間的抽象層\n */\n\nexport function createUIController() {\n  let messageConsumer: ReturnType<typeof createConsumer>;\n\n  // 渲染函數\n  const render = () => {\n    const data = messageConsumer.getChannelData();\n    renderTabs(data);\n  };\n\n  // 🚀 創建 consumer，並傳入重新渲染回調\n  messageConsumer = createConsumer(\"pikka-web-console-channel\", render);\n\n  return {\n    render,\n    stop: messageConsumer.cleanUp,\n  };\n}\n","// 工具函數集合\n// src\\client\\utils\\tools.ts\n\nexport const safeStringify = (arg: unknown): string => {\n  // 避免循環引用object1.A=object1,\n  // 使用WeakSet來追蹤已處理的物件,WeakSet跟Set類似,但不會阻止垃圾回收(更加安全)\n  const seen = new WeakSet<object>();\n  const argTypeMappingFunc = {\n    string: (arg: string) => arg,\n    number: (arg: number) => arg.toString(),\n    boolean: (arg: boolean) => arg.toString(),\n    object: (arg: object) =>\n      JSON.stringify(arg, (_key, value) => {\n        if (typeof value === \"object\" && value !== null) {\n          // 如果循環引用\n          if (seen.has(value)) return \"[Circular]\";\n          seen.add(value);\n        }\n        if (value instanceof Error) {\n          return {\n            name: value.name,\n            message: value.message,\n            stack: value.stack,\n          };\n        }\n        return value;\n      }),\n    function: (arg: Function) => `[Function: ${arg.name || \"anonymous\"}]`,\n    symbol: (arg: symbol) => arg.toString(),\n    bigint: (arg: bigint) => arg.toString() + \"n\",\n    undefined: () => \"undefined\",\n  } as const;\n\n  try {\n    const type = typeof arg;\n    if (type in argTypeMappingFunc) {\n      const handler = argTypeMappingFunc[type];\n      return handler(arg as never);\n    }\n    return String(arg);\n  } catch {\n    return \"[Unserializable]\";\n  }\n};\n\nexport const addTimestamp = () => {\n  return Date.now();\n};\n\nexport function testConsoleMonitor() {\n  console.log(\"開始測試 Console Monitor...\");\n\n  setTimeout(() => {\n    console.log(\"🧪 測試開始 - 這應該會出現在你的控制台\");\n    console.info(\"這是一個 info 消息\");\n    console.warn(\"⚠️  警告測試\");\n    console.error(\"❌ 錯誤測試\");\n    // setTimeout(() => {\n    //   console.log(\"🕐 延遲測試訊息\");\n    // }, 2000);\n    console.log(\"📦 物件測試\", { user: \"test\", timestamp: Date.now() });\n\n    // 測試語法錯誤（這會被 console.error 捕獲）\n    try {\n      eval(\"<invalid syntax>\");\n    } catch (e) {\n      console.error(\"Syntax Error:\", e);\n    }\n\n    // 測試運行時錯誤\n    setTimeout(() => {\n      try {\n        // @ts-ignore\n        undefinedVariable.someProperty;\n      } catch (e) {\n        console.error(\"Runtime Error:\", e);\n      }\n    }, 1000);\n\n    // 測試資源錯誤\n    const img = new Image();\n    img.src = \"https://example.com/nonexistent.jpg\";\n    document.body.appendChild(img);\n  }, 500);\n}\n\nexport const formatTimestamp = (timestamp: number) => {\n  return new Date(timestamp).toLocaleTimeString(\"zh-TW\", {\n    hour12: false,\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    fractionalSecondDigits: 3,\n  });\n};\n","// src/client/core/console-interceptor.ts\nimport { safeStringify, addTimestamp } from \"../utils\";\nimport type { ConsolePayload } from \"@/client/types\";\n\n/**\n * 控制台攔截器 - 攔截和監控原生 console 方法\n *\n * 技術實作基礎：\n * Interceptor Pattern 攔截器模式\n * 職責：整裝原生 API，不破壞原有功能，增加監控能力\n * - **方法攔截**：攔截 `console.log`、`console.error`、`console.warn`、`console.info`\n * - **數據序列化**：安全序列化各種數據類型（透過 `safeStringify`）\n * - **時間戳增加**：為所有訊息增加時間戳（透過 `addTimestamp`）\n * - **原始功能保持**：使用 `apply` 調用原始 console 方法\n * - **可還原性**：提供 `restoreLog` 方法恢復原始狀態\n *\n */\n\nconst createConsoleInterceptor = ({\n  callback,\n}: {\n  callback: (data: ConsolePayload) => void;\n}) => {\n  const { log, warn, info } = console;\n  const start = () => {\n    console.log = (...args: unknown[]) => {\n      const payload: ConsolePayload = {\n        level: \"log\",\n        args,\n        message: args.map(safeStringify).join(\" \"),\n        timestamp: addTimestamp(),\n        source: {\n          tabId: \"\",\n          url: location.pathname + location.search + location.hash, //用來檢視log的頁面路徑跟其參數\n          origin: location.origin, //域名\n        },\n      };\n      callback(payload);\n      // 同理apply(console, args)但是更簡潔更現代\n      // console[payload.level](...args);\n      log.apply(console, args);\n    };\n    console.warn = (...args: unknown[]) => {\n      const payload: ConsolePayload = {\n        level: \"warn\",\n        args,\n        message: args.map(safeStringify).join(\" \"),\n        timestamp: addTimestamp(),\n        source: {\n          tabId: \"\",\n          url: location.pathname + location.search + location.hash, //用來檢視log的頁面路徑跟其參數\n          origin: location.origin, //域名\n        },\n      };\n      callback(payload);\n\n      // console[payload.level](...args);\n      warn.apply(console, args);\n    };\n\n    console.info = (...args: unknown[]) => {\n      const payload: ConsolePayload = {\n        level: \"info\",\n        args,\n        message: args.map(safeStringify).join(\" \"),\n        timestamp: addTimestamp(),\n        source: {\n          tabId: \"\",\n          url: location.pathname + location.search + location.hash, //用來檢視log的頁面路徑跟其參數\n          origin: location.origin, //域名\n        },\n      };\n      // console[payload.level](...args);\n      callback(payload);\n      info.apply(console, args);\n    };\n  };\n\n  const stop = () => {\n    console.log = log;\n    console.info = info;\n    console.warn = warn;\n  };\n\n  return {\n    stop,\n    start,\n  };\n};\n\nexport { createConsoleInterceptor };\n","// src/client/core/error-collector.ts\nimport { safeStringify, addTimestamp } from \"@/client/utils\";\nimport type { ErrorPayload } from \"@/client/types\";\n\n/**\n * 錯誤收集器 - 全域錯誤監控和收集\n *\n * 技術實作基礎：\n * Observer Pattern 觀察者模式 + Event Listener Pattern\n * 職責：監聽全域錯誤事件，統一收集和格式化\n * - **JavaScript 運行時錯誤**：捕獲 `ErrorEvent` 類型的 JS 錯誤\n * - **資源載入錯誤**：捕獲圖片、腳本、樣式等資源 404 錯誤\n * - **Promise 拒絕監控**：監控未處理的 `unhandledrejection` 事件\n * - **錯誤去重**：使用結構化的 key 策略避免重複錯誤\n * - **錯誤分類**：区分 JS 錯誤、資源錯誤、Promise 錯誤\n */\n\nconst createErrorCollector = ({\n  callback,\n}: {\n  callback: (data: ErrorPayload) => void;\n}) => {\n  const { error } = console;\n  console.error = (...args: unknown[]) => {\n    const payload: ErrorPayload = {\n      // name:console.error 第一個參數如果是 Error 物件,讀取名稱，否則為 Error\n      name: args[0] instanceof Error ? args[0].name : \"Error\",\n      // message:console.error 第一個參數如果是 Error 物件,讀取訊息，否則為第一個參數\n      message:\n        args[0] instanceof Error ? args[0].message : safeStringify(args[0]),\n      // stack:console.error 第一個參數如果是 Error 物件,讀取堆疊，否則為空\n      stack: args[0] instanceof Error ? args[0].stack : \"\",\n      cause: args[0] instanceof Error ? args[0].cause : undefined,\n      timestamp: addTimestamp(),\n      source: {\n        tabId: \"\",\n        url: location.pathname + location.search + location.hash, //用來檢視log的頁面路徑跟其參數\n        origin: location.origin, //域名\n      },\n    };\n    callback(payload);\n    error.apply(console, args);\n  };\n  const onError = (e: ErrorEvent | Event) => {\n    const payload: ErrorPayload = {\n      // name:如果是ErrorEvent,讀取名稱，否則為Error\n      name: e instanceof ErrorEvent ? e.error?.name || \"Error\" : \"Error\",\n      // message:如果是ErrorEvent,讀取訊息，否則為序列化後的錯誤物件\n      message: e instanceof ErrorEvent ? e.error?.message : safeStringify(e),\n      // stack:如果是ErrorEvent,讀取[錯誤發生位置stack]，否則為空\n      stack: e instanceof ErrorEvent ? e.error?.stack : \"\",\n      timestamp: addTimestamp(),\n      source: {\n        tabId: \"\",\n        url: location.pathname + location.search + location.hash, //用來檢視log的頁面路徑跟其參數\n        origin: location.origin, //域名\n      },\n    };\n    callback(payload);\n  };\n\n  const onRejection = (errorEvent: PromiseRejectionEvent) => {\n    const raw = `Promise UnhandledRejection: ${safeStringify(errorEvent.reason)}`;\n    // EX: PR|Promise UnhandledRejection: undefined\n    // const key = `PR|${raw}`;\n    const payload: ErrorPayload = {\n      name:\n        errorEvent.reason && errorEvent.reason instanceof Error\n          ? errorEvent.reason.name\n          : \"Error\",\n      message:\n        errorEvent.reason && errorEvent.reason instanceof Error\n          ? errorEvent.reason.message\n          : raw,\n      stack:\n        errorEvent.reason && errorEvent.reason instanceof Error\n          ? errorEvent.reason.stack\n          : \"\",\n      timestamp: addTimestamp(),\n      source: {\n        tabId: \"\",\n        url: location.pathname + location.search + location.hash, //用來檢視log的頁面路徑跟其參數\n        origin: location.origin, //域名\n      },\n    };\n    callback(payload);\n  };\n\n  const start = () => {\n    window.addEventListener(\"error\", onError);\n    window.addEventListener(\"unhandledrejection\", onRejection);\n  };\n  const stop = () => {\n    window.removeEventListener(\"error\", onError);\n    window.removeEventListener(\"unhandledrejection\", onRejection);\n    console.error = error;\n  };\n  return {\n    start,\n    stop,\n  };\n};\n\nexport { createErrorCollector };\n","import { createConsoleInterceptor } from \"@/client/core/console-interceptor\";\nimport { createErrorCollector } from \"@/client/core/error-collector\";\n\n// 發信機\nexport const producer = (channel: string) => {\n  const broadcastChannel = new BroadcastChannel(channel);\n\n  const consoleInterceptor = createConsoleInterceptor({\n    callback: (data) => {\n      broadcastChannel.postMessage(data);\n      // console.log(\"Sent data:\", data);\n    },\n  });\n  const errorCollector = createErrorCollector({\n    callback: (data) => {\n      broadcastChannel.postMessage(data);\n      // console.log(\"Sent error:\", data);\n    },\n  });\n  const start = () => {\n    consoleInterceptor.start();\n    errorCollector.start();\n  };\n  const stop = () => {\n    consoleInterceptor.stop();\n    errorCollector.stop();\n    broadcastChannel.close();\n  };\n\n  return { start, stop };\n};\n","//src/client/core/main.ts\nimport { producer as createProducer } from \"./producer\";\nimport type { ConsoleService } from \"@/client/types\";\n\n/**\n * 核心服務層 - 提供 console 攔截和錯誤收集服務\n *\n * 技術實作基礎：\n * Layered Architecture 分層架構 - Service Layer\n * 職責：數據封裝、核心業務邏輯、服務統一\n * - **數據狀態管理**：封裝 `ConsoleDataStore`，不讓外部直接操作\n * - **服務統一**：整合 `consoleInterceptor` 和 `errorCollector`\n * - **資源管理**：提供統一的 `cleanUp` 方法\n * - **數據存取 API**：提供安全的數據取用方法\n */\n\nexport function createConsoleInterceptor(): ConsoleService {\n  // 資料封裝,不讓外部直接操作\n\n  //呼叫的時候就會掛載監聽器了,所以需要手動關閉->stop\n  const producer = createProducer(\"pikka-web-console-channel\");\n  const start = () => {\n    producer.start();\n  };\n  const cleanUp = () => {\n    producer.stop();\n  };\n\n  // 資料存取函式\n\n  return {\n    start,\n    cleanUp,\n  };\n}\n","export default \"<div class=\\\"font-sans leading-6 font-normal text-gray-100 bg-gray-950 \\n            min-h-screen flex flex-col m-0 w-full\\\">\\n\\n  <!-- Header Container -->\\n  <div class=\\\"w-full\\\">\\n    <!-- Tab Navigation -->\\n    <ul id=\\\"tab-links\\\" \\n        role=\\\"tablist\\\"\\n        class=\\\"flex flex-wrap text-sm font-medium text-center \\n               text-gray-400 border-b border-gray-700 select-none\\n               /* active 樣式（由 JS 加上 .active 時生效） */\\n               [&_.active]:text-white [&_.active]:bg-gray-800/70\\\">\\n\\n      <!-- Log Tab -->\\n      <li class=\\\"me-2\\\">\\n        <button role=\\\"tab\\\" aria-current=\\\"page\\\"\\n                class=\\\"inline-block px-4 py-2 rounded-t-lg transition-colors\\n                       hover:!text-white hover:!bg-gray-800/80 focus-visible:outline-none\\n                       focus-visible:ring-2 focus-visible:ring-blue-500/50\\\">\\n          Log\\n        </button>\\n      </li>\\n\\n      <!-- Error Tab -->\\n      <li class=\\\"me-2\\\">\\n        <button role=\\\"tab\\\"\\n                class=\\\"inline-block px-4 py-2 rounded-t-lg transition-colors\\n                       hover:!text-white hover:!bg-gray-800/80 focus-visible:outline-none\\n                       focus-visible:ring-2 focus-visible:ring-red-500/40\\\">\\n          Error\\n        </button>\\n      </li>\\n\\n      <!-- Warn Tab -->\\n      <li class=\\\"me-2\\\">\\n        <button role=\\\"tab\\\"\\n                class=\\\"inline-block px-4 py-2 rounded-t-lg transition-colors\\n                       hover:!text-white hover:!bg-gray-800/80 focus-visible:outline-none\\n                       focus-visible:ring-2 focus-visible:ring-yellow-500/40\\\">\\n          Warn\\n        </button>\\n      </li>\\n\\n      <!-- Info Tab -->\\n      <li class=\\\"me-2\\\">\\n        <button role=\\\"tab\\\"\\n                class=\\\"inline-block px-4 py-2 rounded-t-lg transition-colors\\n                       hover:!text-white hover:!bg-gray-800/80 focus-visible:outline-none\\n                       focus-visible:ring-2 focus-visible:ring-green-500/40\\\">\\n          Info\\n        </button>\\n      </li>\\n\\n      <!-- All Tab -->\\n      <li>\\n        <button role=\\\"tab\\\"\\n                class=\\\"inline-block px-4 py-2 rounded-t-lg transition-colors\\n                       hover:!text-white hover:!bg-gray-800/80 focus-visible:outline-none\\n                       focus-visible:ring-2 focus-visible:ring-purple-500/40\\\">\\n          All\\n        </button>\\n      </li>\\n    </ul>\\n  </div>\\n\\n  <!-- Main Content Area -->\\n  <div class=\\\"flex-1 flex flex-col\\\">\\n    <!-- Tab Content Display -->\\n    <div id=\\\"tab-content\\\"\\n         class=\\\"flex-1 bg-gray-900 overflow-hidden\\n                /* 覆蓋 JS 生成項目的 hover 與邊框（不改 JS） */\\n                [&_.console-message]:!border-gray-700\\n                [&_.console-message:hover]:!bg-gray-800/60\\n                [&_.text-gray-400]:text-gray-400\\\">\\n\\n      <!-- Console History Display -->\\n      <div class=\\\"console-history h-full flex flex-col\\\">\\n        <!-- Input Log Display -->\\n        <div id=\\\"console-input-log\\\" \\n             class=\\\"flex-1 overflow-y-auto p-4 space-y-2 text-sm\\\">\\n          <!-- console 輸入內容 -->\\n        </div>\\n\\n        <!-- Output Log Display -->\\n        <div id=\\\"console-output-log\\\" \\n             class=\\\"flex-1 overflow-y-auto p-4 space-y-2 \\n                    border-t border-gray-700 text-sm\\\">\\n          <!-- console 輸出內容 -->\\n        </div>\\n      </div>\\n    </div>\\n\\n    <!-- Console Input Area -->\\n    <div class=\\\"border-t border-gray-700 p-4 bg-gray-900\\\">\\n      <div class=\\\"flex items-center space-x-2\\\">\\n        <span class=\\\"text-green-400 font-mono\\\">></span>\\n        <input id=\\\"console-input\\\" \\n               type=\\\"text\\\" \\n               autofocus \\n               spellcheck=\\\"false\\\"\\n               placeholder=\\\"輸入 JavaScript 指令...\\\"\\n               class=\\\"flex-1 bg-gray-800 text-gray-100 \\n                      border border-gray-600 rounded px-3 py-2\\n                      focus:border-blue-500 focus:outline-none\\n                      font-mono text-sm transition-colors\\\">\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\"","// src / client / app / app - controller.ts;\n\nimport { createUIController } from \"@/client/components\";\nimport { createConsoleInterceptor } from \"@/client/core\";\nimport { testConsoleMonitor } from \"../utils\";\nimport logPage from \"@assets/template/console-page.html?raw\";\n\n/**\n * 應用控制器 - 管理應用的生命週期和狀態\n *\n * 技術實作基礎：\n * Layered Architecture 分層架構 - Application Layer\n *\n * @description\n * 職責：協調各層，管理應用生命週期，不包含具體業務邏輯\n *\n * **主要職責：**\n * - **應用狀態管理**：統一管理整個應用的狀態和生命週期\n * - **模組協調**：作為各個組件（監控器、UI、工具）之間的協調中心\n * - **DOM 初始化**：負責 HTML 模板掛載和基礎 DOM 結構建立\n * - **核心服務啟動**：協調 UI 控制器和核心服務的啟動\n * - **開發模式支援**：提供開發環境下的額外功能和測試\n *\n */\n\nexport function appController() {\n  let isInitialized = false;\n  let isStarted = false;\n  let ui: ReturnType<typeof createUIController> | null = null;\n  let consoleService: ReturnType<typeof createConsoleInterceptor> | null = null; // 👈 加入這個\n\n  const initializeDOM = (): boolean => {\n    const app = document.querySelector<HTMLElement>(\"#pikka-console-web\");\n    if (!app) {\n      // console.error(\"找不到 #app 元素\");\n      return false;\n    }\n    app.innerHTML = logPage;\n\n    return true;\n  };\n\n  const startCoreServices = (): boolean => {\n    consoleService = createConsoleInterceptor();\n    consoleService.start();\n    // render跟掛載監聽器\n    ui = createUIController();\n    ui.render();\n    if (!ui) {\n      // console.error(\"UI 控制器未初始化，無法啟動服務\");\n      return false;\n    }\n    // console.log(\"核心服務已啟動\");\n    return true;\n  };\n\n  /**\n   * @description\n   * 在開發模式下啟動額外的日誌和測試\n   *\n   * @example\n   * 在開發模式下，取消註釋以下代碼以啟用測試\n   * testConsoleMonitor();\n   */\n  const initializeDevelopmentMode = (): void => {\n    if (import.meta.env.DEV) {\n      // console.log(\"應用已啟動 - 開發模式\");\n      // 取消註釋以啟用測試\n      testConsoleMonitor();\n    }\n  };\n\n  return {\n    initialize(): boolean {\n      if (isInitialized) {\n        // 代表已經初始化過一次\n        // console.warn(\"應用已經初始化過了\");\n        return true;\n      }\n\n      //初始化應用\n      if (!initializeDOM()) {\n        // console.error(\"初始化DOM失敗\");\n        return false;\n      }\n      // 啟動console監聽程序\n      startCoreServices();\n      // 啟動開發者模式\n      isInitialized = true;\n\n      return true;\n    },\n    bootUp(): boolean {\n      if (!this.initialize()) {\n        // console.warn(\"應用程式初始化未完成(可能是初始化失敗)\");\n        return false;\n      }\n      if (isStarted) {\n        // console.log(\"應用已啟動\");\n        return true;\n      }\n      if (!startCoreServices()) {\n        // console.error(\"核心服務啟動失敗\");\n        return false;\n      }\n      initializeDevelopmentMode();\n\n      isStarted = true;\n      return true;\n    },\n    restart(): boolean {\n      isInitialized = false;\n      isStarted = false;\n      return this.bootUp();\n    },\n    stop(): void {\n      if (consoleService) {\n        consoleService.cleanUp(); // 👈 清理 producer\n      }\n      if (ui) {\n        ui.stop(); // 👈 清理 consumer\n      }\n      isStarted = false;\n    },\n    getApplicationStatus(): { isInitialized: boolean; isStarted: boolean } {\n      return {\n        isInitialized,\n        isStarted,\n      };\n    },\n    isReady(): boolean {\n      return isInitialized && isStarted;\n    },\n  };\n}\n","// src / client / app / main.ts;\nimport { appController } from \"./app-controller\";\n\n/**\n * 客戶端應用入口\n *\n * 技術實作基礎：\n * Layered Architecture 分層架構 - Client App Layer\n * 職責：環境檢測、DOM 就緒檢測、應用啟動協調\n * - **環境檢測**：檢測是否在瀏覽器環境中運行，避免 SSR 環境問題\n *- **DOM 就緒檢測**：智能檢測 DOM 載入狀態，適時啟動應用\n *- **全域物件掛載**：將應用實例掛載到 `window.consoleApp`\n *- **應用啟動協調**：調用應用控制器進行啟動流程\n */\n\nconst app = appController();\n\nfunction bootsStartUp(): void {\n  const success = app.bootUp();\n\n  if (!success) {\n    // console.error(\"應用啟動失敗\");\n    return;\n  }\n\n  // 檢測執行這段code的環境是不是在瀏覽器環境中執行\n  // false → window 存在 --> 代表 現在是在瀏覽器中執行，因為瀏覽器才有 window 這個全域物件。\n  if (typeof window !== \"undefined\") {\n    // windows.(自定義要掛載的方法)=函式(自訂)\n    (window as any).consoleApp = app;\n  }\n}\n\n// 環境檢測跟啟動\nfunction initializeApp(): boolean {\n  // 檢測執行這段code的環境是不是在瀏覽器環境中執行\n  // true → window 是 undefined--->代表 現在的執行環境沒有 window 物件。\n  // SSR,Node環境有自己的終端\n  if (typeof window === \"undefined\") {\n    return false;\n  }\n  if (document.readyState === \"loading\") {\n    document.addEventListener(\"DOMContentLoaded\", bootsStartUp, { once: true });\n    return false;\n  } else {\n    bootsStartUp();\n    return true;\n  }\n}\ninitializeApp();\n"],"names":["LEVEL_COLOR_MAP","escapeHtml","text","div","createMessageHtml","message","colorClass","createMessageListHtml","messages","msg","buildContainer","innerHtml","className","renderAllMessages","containerClass","allMessages","a","b","CONTAINER_CLASS","TAB_ACTIVE_CLASSES","TAB_CONTENT_MAP","clearAllTabStats","tabs","bgColors","tab","activateTab","tabType","getTabContent","consoleData","switchContent","content","renderTabs","data","tabList","ALL_BG_COLORS","button","newButton","buttonText","e","target","AllData","consumer","channelName","onDataUpdate","stateStore","broadcastChannel","messageHandler","event","error","info","warn","log","createUIController","messageConsumer","render","createConsumer","safeStringify","arg","seen","argTypeMappingFunc","_key","value","type","handler","addTimestamp","createConsoleInterceptor","callback","args","payload","createErrorCollector","onError","onRejection","errorEvent","raw","producer","channel","consoleInterceptor","errorCollector","createProducer","logPage","appController","isInitialized","isStarted","ui","consoleService","initializeDOM","app","startCoreServices","bootsStartUp","initializeApp"],"mappings":"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"}